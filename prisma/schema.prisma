// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    refresh_token_expires_in Int?
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model TimelineEvent {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    topic       String
    icon        String
    description String
    color       String
    start       DateTime
    end         DateTime?
    complete    Boolean
}

model Routine {
    id             String         @id @default(cuid())
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    summary        String
    details        String
    occurrenceType OccurrenceType
    daysOfWeek     DaySelector[]
    startDateTime  DateTime
    endDateTime    DateTime?
}

model DaySelector {
    id               String   @id @default(cuid())
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    label            String
    abbreviatedLabel String
    selected         Boolean
    routine          Routine? @relation(fields: [routineId], references: [id])
    routineId        String?
}

enum OccurrenceType {
    NEVER
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
}

// enum DayOfMonthType {
//     FIRST
//     MIDDLE
//     LAST
// }
