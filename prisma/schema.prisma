// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth (controls whether someone is let it even if they authenticate with a provider)
model Invitee {
    id                String   @id @default(cuid())
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    email             String
    userId            String
    providerName      String
    providerAccountId String
    enabled           Boolean  @default(false)

    @@unique([email, userId, providerName, providerAccountId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    refresh_token_expires_in Int?
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

// Necessary for Next auth
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    routines      Routine[]
    daySelectors  DaySelector[]
    topics        Topic[]
    activities    Activity[]
    Preferences   Preferences[]
}

model Preferences {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique

    latitude  Float
    longitude Float
}

// Necessary for Next auth
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// build routines to generate activities which feed your timeline to get stuff done!
model Routine {
    id               String         @id @default(cuid())
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
    user             User           @relation(fields: [userId], references: [id])
    userId           String
    name             String
    description      String
    occurrenceType   OccurrenceType
    dailyEveryValue  Int?
    yearlyMonthValue Int?
    yearlyDayValue   Int?
    // you can store as @db.Date and @db.Time but problem is that Postgres (or possibly Prisma) assumes everything is stored as UTC and so it applies your timezone offset causing dates/times to change
    startDate        DateTime //daylight savings time didn't work: @db.Date
    fromTime         DateTime //daylight savings time didn't work: @db.Time
    toTime           DateTime //daylight savings time didn't work: @db.Time@db.Time
    endDate          DateTime? //daylight savings time didn't work: @db.Date
    neverEnds        Boolean?

    weeklyDaysSelected  DaySelector[] @relation("WeeklyDaysSelected")
    monthlyDaysSelected DaySelector[] @relation("MonthlyDaysSelected")
    activities          Activity[]

    topic   Topic  @relation(fields: [topicId], references: [id])
    topicId String
}

// for repeated routines, we use day selector to indicate which days of week or days of month something repeats
model DaySelector {
    id                    String   @id @default(cuid())
    createdAt             DateTime @default(now())
    updatedAt             DateTime @updatedAt
    user                  User     @relation(fields: [userId], references: [id])
    userId                String
    label                 String
    abbreviatedLabel      String
    selected              Boolean
    weeklyDaysSelected    Routine? @relation("WeeklyDaysSelected", fields: [weeklyDaysSelectedId], references: [id], onDelete: Cascade)
    weeklyDaysSelectedId  String?
    monthlyDaysSelected   Routine? @relation("MonthlyDaysSelected", fields: [monthlyDaysSelectedId], references: [id], onDelete: Cascade)
    monthlyDaysSelectedId String?
}

// how often something repeats
enum OccurrenceType {
    NEVER
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
}

// alternate method of allowing user to select behavior instead of selecting specific days
// enum DayOfMonthType {
//     FIRST
//     MIDDLE
//     LAST
// }

// groups together routines
model Topic {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    user        User      @relation(fields: [userId], references: [id])
    userId      String
    name        String
    description String
    icon        String
    color       String
    routines    Routine[]
}

// feeds timeline so you can complete/skip them (track progress)
model Activity {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    routine     Routine   @relation(fields: [routineId], references: [id], onDelete: Cascade)
    routineId   String
    start       DateTime
    end         DateTime
    complete    Boolean   @default(false)
    completedAt DateTime?
    skip        Boolean   @default(false)
}
