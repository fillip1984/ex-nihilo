// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth 
// Grants access on invitation only circumstance. Whenever someone attempts to log in, 
// we'll create an invitation initially set to false. We can then grant them access by 
// flipping the enabled column to true. The name and email fields only help you identify
// whether you want to grant access. The providerName tells you which provider they're using
// the providerAccountId should uniquely identify them from the provider
model Invitation {
    id                String   @id @default(cuid())
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    email             String
    userId            String
    providerName      String
    providerAccountId String
    enabled           Boolean  @default(false)

    @@unique([providerName, providerAccountId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    refresh_token_expires_in Int?
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

// Necessary for Next auth
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model User {
    id                    String                 @id @default(cuid())
    name                  String?
    email                 String?                @unique
    emailVerified         DateTime?
    image                 String?
    accounts              Account[]
    sessions              Session[]
    routines              Routine[]
    daySelectors          DaySelector[]
    topics                Topic[]
    activities            Activity[]
    runs                  Run[]
    weighIns              WeighIn[]
    bloodPressureReadings BloodPressureReading[]
    notes                 Note[]

    preferences Preferences?
    weightGoal  WeightGoal?
}

model Preferences {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique

    latitude  Float?
    longitude Float?

    timezone String @default("America/New_York")
}

// Necessary for Next auth
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// build routines to generate activities which feed your timeline to get stuff done!
model Routine {
    id               String             @id @default(cuid())
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    user             User               @relation(fields: [userId], references: [id])
    userId           String
    name             String
    description      String
    onComplete       CompleteOptionType
    occurrenceType   OccurrenceType
    dailyEveryValue  Int?
    yearlyMonthValue Int?
    yearlyDayValue   Int?
    // time is tricky. Everything will be stored as UTC time. So if you set a start time of 1/1/23 00:00 (midnight), depending on day light savings time, it will set it for 1/2/23 04:00 or 05:00.
    // Seems like dayjs and date-fns have issues with daylight savings so I rolled my own solution under date.js
    startDate        String
    fromTime         String
    toTime           String
    endDate          String?
    neverEnds        Boolean

    weeklyDaysSelected  DaySelector[] @relation("WeeklyDaysSelected")
    monthlyDaysSelected DaySelector[] @relation("MonthlyDaysSelected")
    activities          Activity[]

    topic   Topic  @relation(fields: [topicId], references: [id])
    topicId String
}

// for repeated routines, we use day selector to indicate which days of week or days of month something repeats
model DaySelector {
    id                    String   @id @default(cuid())
    createdAt             DateTime @default(now())
    updatedAt             DateTime @updatedAt
    user                  User     @relation(fields: [userId], references: [id])
    userId                String
    label                 String
    abbreviatedLabel      String
    selected              Boolean
    weeklyDaysSelected    Routine? @relation("WeeklyDaysSelected", fields: [weeklyDaysSelectedId], references: [id], onDelete: Cascade)
    weeklyDaysSelectedId  String?
    monthlyDaysSelected   Routine? @relation("MonthlyDaysSelected", fields: [monthlyDaysSelectedId], references: [id], onDelete: Cascade)
    monthlyDaysSelectedId String?
}

enum CompleteOptionType {
    SIMPLE
    NOTE
    WEIGH_IN
    BLOOD_PRESSURE_READING
    RUNNERS_LOG
}

// how often something repeats
enum OccurrenceType {
    NEVER
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
}

// alternate method of allowing user to select behavior instead of selecting specific days
// enum DayOfMonthType {
//     FIRST
//     MIDDLE
//     LAST
// }

// groups together routines
model Topic {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    user        User      @relation(fields: [userId], references: [id])
    userId      String
    name        String
    description String
    icon        String
    color       String
    routines    Routine[]
}

// feeds timeline so you can complete/skip them (track progress)
model Activity {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    routine     Routine   @relation(fields: [routineId], references: [id], onDelete: Cascade)
    routineId   String
    start       DateTime
    end         DateTime
    complete    Boolean   @default(false)
    completedAt DateTime?
    skip        Boolean   @default(false)

    //on complete outcomes
    run                  Run?
    weighIn              WeighIn?
    bloodPressureReading BloodPressureReading?
    note                 Note?

    WeightGoal WeightGoal?
}

model Run {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
    activityId String   @unique

    date             DateTime
    distance         Float
    duration         String
    pace             String
    heartRageAverage Int?
    weather          WeatherType?
    mood             MoodType?
}

enum WeatherType {
    Cold
    Rainy
    Fair
    Hot
}

enum MoodType {
    Bad
    Okay
    Good
    Great
}

model WeighIn {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
    activityId String   @unique

    date              DateTime
    weight            Float
    // weightProgress     Float
    // weightTotalChange  Float
    // weightToGoal       Float
    bodyFatPercentage Float?
    // bodyFatProgress    Float?
    // bodyFatTotalChange Float?
    // previousWeighInId  String?
}

model WeightGoal {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User     @relation(fields: [userId], references: [id])
    userId     String   @unique
    activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
    activityId String   @unique

    weight Float
}

model BloodPressureReading {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
    activityId String   @unique

    date      DateTime
    systolic  Int
    diastolic Int
    pulse     Int?
    // systolicChange  Int
    // diastolicChange Int
    // pulseChange     Int?
    category  BloodPressureCategory
}

enum BloodPressureCategory {
    LOW
    NORMAL
    ELEVATED
    HYPERTENSION_STAGE_1
    HYPERTENSION_STAGE_2
    HYPERTENSION_CRISIS
}

model Note {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
    activityId String   @unique

    date    DateTime
    content String
}
